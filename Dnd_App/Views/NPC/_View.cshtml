@model Dnd_App.Models.Characters.NPC

@{
    //LOGIC

    #region BASIC INFO
    var TextDescription = "";
    TextDescription += Model.Size.TypeSize + " ";
    TextDescription += Model.TypeCreature;
    if (Model.Tag != "")
    {
        TextDescription += " (" + Model.Tag + ")";
    }
    TextDescription += ", ";

    var TextAlignment = "";
    if (Model.AlignmentAttitude == Dnd_App.Models.Enum.TypeAlignAttitude.none && Model.AlignmentMorality == Dnd_App.Models.Enum.TypeAlignMorality.none)
    {
        TextAlignment += "unaligned";
    }
    else if (Model.AlignmentAttitude == Dnd_App.Models.Enum.TypeAlignAttitude.none && Model.AlignmentMorality != Dnd_App.Models.Enum.TypeAlignMorality.none)
    {
        TextAlignment += Model.AlignmentMorality;
    }
    else if (Model.AlignmentAttitude != Dnd_App.Models.Enum.TypeAlignAttitude.none && Model.AlignmentMorality == Dnd_App.Models.Enum.TypeAlignMorality.none)
    {
        TextAlignment += Model.AlignmentAttitude;
    }
    else if (Model.AlignmentAttitude == Dnd_App.Models.Enum.TypeAlignAttitude.neutral && Model.AlignmentMorality == Dnd_App.Models.Enum.TypeAlignMorality.neutral)
    {
        TextAlignment += Model.AlignmentAttitude;
    }
    else
    {
        TextAlignment += Model.AlignmentAttitude + " " + Model.AlignmentMorality;
    }
    #endregion

    #region ARMOR

    var TextArmor = " ";
    TextArmor += Model.ArmorClass.Total + " (";
    if (Model.ArmorClass.Shield)
    {
        TextArmor += @Dnd_App.Utils.Helpers.Description(Model.ArmorClass.Name) + ", shield)";
    }
    else
    {
        TextArmor += @Dnd_App.Utils.Helpers.Description(Model.ArmorClass.Name) + ")";
    }

    #endregion

    #region HITPOINTS

    var TextHP = " ";
    TextHP += Model.HitPoint.HitPointsAVG + " ";
    TextHP += "(" + Model.HitPoint.Die + "" + Model.HitPoint.TypeDie;
    if (Model.HitPoint.BonusMultiplied > 0)
    {
        TextHP += " + " + Model.HitPoint.BonusMultiplied + ")";
    }
    else if (Model.HitPoint.BonusMultiplied < 0)
    {
        TextHP += Model.HitPoint.BonusMultiplied + ")";
    }
    else
    {
        TextHP += ")";
    }

    #endregion

    #region SPEEDS

    var TextSpeeds = " ";
    for (int i = 0; i < Model.Speeds.Count; i++)
    {
        if (@Model.Speeds[i].TypeSpeed != Dnd_App.Models.Enum.TypeSpeed.Base)
        {
            TextSpeeds += Model.Speeds[i].TypeSpeed + " " + Model.Speeds[i].Speedft + "ft.";
        }
        else
        {
            TextSpeeds += Model.Speeds[i].Speedft + "ft.";
        }
        if (i != Model.Speeds.Count - 1)
        {
            TextSpeeds += ", ";
        }
    }

    #endregion

    #region ST

    var TextST = "";

    if (Model.SavingThrows != null && Model.SavingThrows.Count > 0)
    {

        for (int i = 0; i < Model.SavingThrows.Count; i++)
        {
            TextST += Model.SavingThrows[i].ModName;
            if (@Model.SavingThrows[i].Value >= 0)
            {
                TextST += " +" + Model.SavingThrows[i].Value;
            }
            else
            {
                TextST += Model.SavingThrows[i].Value;
            }
            if (i != Model.SavingThrows.Count - 1)
            {
                TextST += ", ";
            }

        }
    }


    #endregion


    #region SKILLS

    var TextSkills = " ";

    if (Model.Skills.Count > 0)
    {
        for (int i = 0; i < Model.Skills.Count; i++)
        {
            TextSkills += Dnd_App.Utils.Helpers.Description(Model.Skills[i].SkillName);
            if (@Model.Skills[i].Total > 0)
            {
                TextSkills += " + " + Model.Skills[i].Total;
            }
            else
            {
                TextSkills += " " + Model.Skills[i].Total;
            }
            if (i != Model.Skills.Count - 1)
            {
                TextSkills += ", ";
            }
        }
    }
    #endregion


    #region VUL RES COND

    var TextVUL = "";

    if (Model.Vulnerabilities.Count > 0)
    {
        for (int i = 0; i < Model.Vulnerabilities.Count; i++)
        {
            TextVUL += Model.Vulnerabilities[i].TypeDamage;
            if (i != Model.Vulnerabilities.Count - 1)
            {
                TextVUL += ", ";
            }
        }
    }

    var TextRES = "";

    if (Model.Resistances.Count > 0)
    {
        for (int i = 0; i < Model.Resistances.Count; i++)
        {
            TextRES += Model.Resistances[i].TypeDamage;
            if (i != Model.Resistances.Count - 1)
            {
                TextRES += ", ";
            }
        }
    }

    var TextIMMD = "";

    if (Model.ImmunitiesDamage.Count > 0)
    {
        for (int i = 0; i < Model.ImmunitiesDamage.Count; i++)
        {
            TextIMMD += Model.ImmunitiesDamage[i].TypeDamage;
            if (i != Model.ImmunitiesCondition.Count - 1)
            {
                TextIMMD += ", ";
            }
        }
    }

    var TextIMMC = "";

    if (Model.ImmunitiesCondition.Count > 0)
    {
        for (int i = 0; i < Model.ImmunitiesCondition.Count; i++)
        {
            TextIMMC += Model.ImmunitiesCondition[i].TypeCondition;
            if (i != Model.ImmunitiesCondition.Count - 1)
            {
                TextIMMC += ", ";
            }
        }
    }


    #endregion

    #region Senses

    var TextSenses = "";

    for (int i = 0; i < Model.Senses.Count; i++)
    {
        if (@Model.Senses[i].TypeSense != Dnd_App.Models.Enum.TypeSense.passivePerception)
        {
            TextSenses += Dnd_App.Utils.Helpers.Description(Model.Senses[i].TypeSense) + " ";
            TextSenses += Model.Senses[i].range + " ft.,";
        }
    }
    TextSenses += " passive Perception ";
    TextSenses += Model.Senses.Where(s => s.TypeSense == Dnd_App.Models.Enum.TypeSense.passivePerception).First().range;

    #endregion

    #region LANGUAGES

    var TextLAN = "";

    if (Model.LanguagesSpeak.Count == 0 && Model.LanguagesUndersatand.Count == 0 && Model.Telepathy <= 0)
    {
        TextLAN += "-";
    }
    else
    {
        if (Model.Telepathy > 0)
        {
            TextLAN += " telepathy " + Model.Telepathy + " ft.";
            if (Model.LanguagesSpeak.Count != 0 || Model.LanguagesUndersatand.Count != 0)
            {
                TextLAN += ", ";
            }
        }
        for (int i = 0; i < Model.LanguagesSpeak.Count; i++)
        {

            TextLAN += Dnd_App.Utils.Helpers.Description(@Model.LanguagesSpeak[i].LanguageName);
            if (i != Model.LanguagesSpeak.Count - 1)
            {
                TextLAN += ", ";
            }
        }
        if (Model.LanguagesSpeak.Count > 0 && Model.LanguagesUndersatand.Count > 0)
        {
            TextLAN += ", ";
        }
        if (Model.LanguagesUndersatand.Count > 0)
        {
            TextLAN += " understands ";
            for (int i = 0; i < Model.LanguagesUndersatand.Count; i++)
            {
                TextLAN += Dnd_App.Utils.Helpers.Description(@Model.LanguagesUndersatand[i].LanguageName);
                if (i != Model.LanguagesUndersatand.Count - 1)
                {
                    TextLAN += ", ";
                }

            }
            TextLAN += " but can't speak";
        }
    }

    #endregion

    #region ACTIONS

    List<String> TextActions = new List<string>();

    for (int i = 0; i < Model.Actions.Count; i++)
    {
        var TextAction = "";

        if (Model.Actions[i].Limited != null && Model.Actions[i].Limited != "")
        {
            TextAction+= "("+ Model.Actions[i].Limited+ ") ";
        }

        TextAction += Dnd_App.Utils.Helpers.Description(Model.Actions[i].TypeAction) + ": +" + Model.Actions[i].TotalBonusAttack + " to hit, ";

        if (Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeWeaponAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeorRangedAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeorRangedWeaponAttack)
        {
            TextAction += " reach " + Model.Actions[i].Range + "ft.";
        }

        if (Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.RangeAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.RangeWeaponAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeorRangedAttack
            || Model.Actions[i].TypeAction == Dnd_App.Models.Enum.TypeAction.MeleeorRangedWeaponAttack)
        {
            TextAction += "range " + Model.Actions[i].Min +"/"+ @Model.Actions[i].Max + " ft.";
        }

        TextAction += ", ";

        TextAction += Model.Actions[i].Target + ".";

        var bonus = Model.Actions[i].BonusDamage + Model.Actions[i].AbilityDamage;
        if (bonus < 0)
        {
            TextAction += "Hit: " + Model.Actions[i].Damage + " (" + Model.Actions[i].HitDie +" "+ Model.Actions[i].Die +" "+ bonus + ") ";
        }
        else
        {
            TextAction += "Hit: " + Model.Actions[i].Damage + " (" + @Model.Actions[i].HitDie + " " + Model.Actions[i].Die + " + " + bonus + ") ";
        }
        TextAction += Model.Actions[i].TypeDamage  + " damage. ";
        TextAction += Model.Actions[i].Description;

        TextActions.Add(TextAction);
    }

    #endregion

}



<div id="_NpcView" class="statblock card-panel yellow-to-orange black-text">

    <div id="_BasicInfo">
        <h4>@Model.Name</h4>
        <div class="font-italic">
            <span>@TextDescription @TextAlignment</span>
        </div>
    </div>

    <hr />

    <div id="_ArmorClass">
        <span class="font-bold">Armor class</span><span>@TextArmor</span>
    </div>


    <div id="_Hitpoints">
        <span class="font-bold">Hit points</span><span>@TextHP</span>
    </div>


    <div id="_Speeds">
        <span class="font-bold">Speed</span><span>@TextSpeeds</span>
    </div>

    <hr />

    <div id="_AbilityScores">
        <div class="row">
            @foreach (var item in Model.AbilitiesScores)
            {
                <div class="col s2 center">
                    <span class="font-bold">@item.ShortName</span>
                    <br />
                    <span>@item.Value</span>
                    @if (item.ModValue >= 0)
                {
                        <span>(+@item.ModValue)</span>
                    }
                    else
                    {
                        <span>(@item.ModValue)</span>
                    }
                </div>
            }
        </div>
    </div>


    <hr />

    <div class="_SavingThrows">
        @if (Model.SavingThrows != null && Model.SavingThrows.Count > 0)
        {
            <span class="font-bold">Saving Throws </span> <span>@TextST</span>
            <br />
        }
    </div>


    <div class="_Skills">
        <!-- Skill-->
        @if (Model.Skills.Count > 0)
        {
            <span class="font-bold">Skills </span><span>@TextSkills</span>
            <br />
        }
    </div>


    <div class="_VulResCond">
        @if (Model.Vulnerabilities.Count > 0)
        {
            <span class="font-bold">Damage Vulnerabilities </span> <span>@TextVUL</span>
            <br />
        }

        <!-- Damage Resistances-->
        @if (Model.Resistances.Count > 0)
        {
            <span class="font-bold">Damage Resistances </span> <span>@TextRES</span>
            <br />
        }

        <!-- Damage Immunities-->
        @if (Model.ImmunitiesDamage.Count > 0)
        {
            <span class="font-bold"> Damage Immunities </span> <span>@TextIMMD</span>
            <br />
        }

        <!-- Condition Immunities-->
        @if (Model.ImmunitiesCondition.Count > 0)
        {
            <span class="font-bold"> Condition Immunities </span> <span>@TextIMMC</span>

            <br />
        }
    </div>


    <div class="_Senses">
        <!-- Senses-->
        @if (Model.Senses.Count > 0)
        {
            <span class="font-bold">Senses </span><span>@TextSenses</span>
            <br />
        }
    </div>


    <div class="_Languages">
        <span class="font-bold">Languages </span><span>@TextLAN</span>
        <br />
    </div>

    <div class="_Challenge">
        <span class="font-bold">Challenge </span>
        <span>@Model.Challenge.Value </span>
        <span>(@Model.Challenge.XP XP) </span>
    </div>

    <hr />

    <div class="_Traits">
        @for (int i = 0; i < Model.SpecialTraits.Count; i++)
        {
            <span class="font-bold font-italic">@Model.SpecialTraits[i].Name.</span><span> @Model.SpecialTraits[i].Description</span>
            if (i != Model.SpecialTraits.Count - 1)
            {
                <br />
                <br />
            }
        }
    </div>


    <div class="_Actions">
    @if (Model.Actions.Count > 0)
    {
        <h5>Actions</h5>
        <hr />
        for (int i = 0; i < Model.Actions.Count; i++)
        {
            <span class="font-bold font-italic">@Model.Actions[i].Name.</span> <span>@TextActions[i]</span>
            if (i != Model.Actions.Count - 1)
            {
                <br />
                <br />
            }
        }
    }
    </div>


    <div class="Reactions">
        @if (Model.Reactions.Count > 0)
        {
            <h5>Reactions</h5>
            <hr />
            for (int i = 0; i < Model.Reactions.Count; i++)
            {
                <span class="font-bold font-italic">@Model.Reactions[i].Name.</span>
                if (Model.Reactions[i].Limited != null && Model.Reactions[i].Limited != "")
                {
                    <span> (@Model.Reactions[i].Limited) </span>
                }

                <span>@Model.Reactions[i].Description</span>
                if (i != Model.Reactions.Count - 1)
                {
                    <br />
                    <br />
                }
            }

        }
    </div>


    <div class="_LegendaryActions">
    @if (Model.LegendaryActions.Count > 0)
    {
        <h5>Legendary Actions</h5>
        <hr />
        for (int i = 0; i < Model.LegendaryActions.Count; i++)
        {
            <span class="font-bold font-italic">@Model.LegendaryActions[i].Name.</span>
            if (Model.LegendaryActions[i].Limited != null && Model.LegendaryActions[i].Limited != "")
            {
                <span> (@Model.LegendaryActions[i].Limited) </span>
            }

            <span>@Model.LegendaryActions[i].Description</span>
            if (i != Model.LegendaryActions.Count - 1)
            {
                <br />
                <br />
            }
        }

    }
    </div>
</div>
